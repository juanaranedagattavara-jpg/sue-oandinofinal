name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, feat/mvp-landing ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar auditoría de seguridad diariamente a las 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm run security:full
      
    - name: Check for vulnerabilities
      run: |
        npm audit --audit-level=high --json > audit-results.json
        if [ -s audit-results.json ]; then
          echo "Vulnerabilidades encontradas:"
          cat audit-results.json
          exit 1
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: audit-results.json

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Test build output
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "Build successful"
        
    - name: Check for build artifacts
      run: |
        ls -la .next/
        echo "Build artifacts verified"

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for outdated packages
      run: npm outdated || true
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate
      
    - name: Check package-lock.json
      run: |
        if [ ! -f "package-lock.json" ]; then
          echo "package-lock.json not found - security risk"
          exit 1
        fi
        echo "package-lock.json verified"

  lighthouse-audit:
    name: Lighthouse Security Audit
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      env:
        PORT: 3000
        
    - name: Wait for application
      run: npx wait-on http://localhost:3000
      
    - name: Run Lighthouse audit
      run: |
        npx lighthouse http://localhost:3000 \
          --output=json \
          --output-path=./lighthouse-report.json \
          --chrome-flags="--headless" \
          --only-categories=security,performance,accessibility
          
    - name: Check Lighthouse scores
      run: |
        node -e "
          const report = JSON.parse(require('fs').readFileSync('./lighthouse-report.json', 'utf8'));
          const scores = report.categories;
          
          console.log('Lighthouse Scores:');
          Object.entries(scores).forEach(([category, data]) => {
            const score = Math.round(data.score * 100);
            console.log(\`\${category}: \${score}/100\`);
            
            if (score < 90) {
              console.error(\`\${category} score below 90: \${score}\`);
              process.exit(1);
            }
          });
        "

  security-headers-check:
    name: Security Headers Check
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      env:
        PORT: 3000
        
    - name: Wait for application
      run: npx wait-on http://localhost:3000
      
    - name: Check security headers
      run: |
        echo "Checking security headers..."
        
        # Check for required security headers
        headers=$(curl -I -s http://localhost:3000)
        
        required_headers=(
          "X-Frame-Options"
          "X-Content-Type-Options"
          "Referrer-Policy"
          "Content-Security-Policy"
        )
        
        for header in "${required_headers[@]}"; do
          if echo "$headers" | grep -qi "$header"; then
            echo "✅ $header present"
          else
            echo "❌ $header missing"
            exit 1
          fi
        done
        
        echo "All required security headers present"

  notify-on-failure:
    name: Notify on Security Failure
    runs-on: ubuntu-latest
    needs: [security-audit, build-and-test, dependency-check, lighthouse-audit, security-headers-check]
    if: failure()
    
    steps:
    - name: Notify security team
      run: |
        echo "🚨 Security check failed!"
        echo "Please review the security audit results and fix any issues."
        echo "Check the workflow logs for detailed information."
